# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

#dashboard
GET        /        @controllers.Application.index()
GET        /logs        @controllers.Application.logs()
GET        /about        @controllers.Application.about()

GET        /stats        @controllers.Stats.index()

GET        /ticks/:id        @controllers.Ticks.element(id: Integer)



#GET        /clusters/query        @controllers.Clusters.query()
GET        /clusters/meta        @controllers.Clusters.meta()
GET        /clusters/:id.json        @controllers.Clusters.data(id: Integer)
GET        /clusters/:id        @controllers.Clusters.element(id: Integer)



# main navigation
GET        /clusters        @controllers.Application.clusters()
GET        /clusters        @controllers.Application.clustersBy(time: String ?= null)

GET        /factors        @controllers.Application.factors()
GET        /factors        @controllers.Application.factorsBy(edge: String ?= null)
GET        /factors/classes        @controllers.Application.factorClasses()

GET        /trades        @controllers.Application.tradesBy(time: String ?= null, buyer: String ?= null, seller: String ?= null, symbol: String ?= null, sector: String ?= null)
GET        /comms        @controllers.Application.commsBy(time: String ?= null, sender: String ?= null, recipient:String ?= null)
GET        /trades        @controllers.Application.trades()
GET        /comms        @controllers.Application.comms()

GET        /traders        @controllers.Application.traders()
GET        /symbols        @controllers.Application.symbols()
GET        /sectors        @controllers.Application.sectors()

GET        /routes        controllers.Application.javascriptRoutes()



GET        /trades/query        @controllers.Trades.query()
GET        /trades/query/:email        @controllers.Trades.queryByTraderId(email: String)



GET        /comms/query        @controllers.Comms.query()


GET        /traders/query        @controllers.Traders.query()
GET        /traders/:email        @controllers.Traders.element(email: String)



GET        /symbols/query        @controllers.Symbols.query()
GET        /symbols/:symbol        @controllers.Symbols.element(symbol: String)


GET        /sectors/query        @controllers.Sectors.query()
GET        /sectors/:sector        @controllers.Sectors.element(sector: String)




# data feeds
GET        /dashboard/clusters.json        @controllers.data.Dashboard.clusters(since: Int ?= 0, count: Int ?= 10)
GET        /dashboard/ticks.json        @controllers.data.Dashboard.ticks(since: Int ?= 0, count: Int ?= 10)
GET        /dashboard/clusters/rate.json        @controllers.data.Dashboard.clusterRate()
GET        /dashboard/activity.json        @controllers.data.Dashboard.activity()
GET        /dashboard/events.json        @controllers.data.Dashboard.events()

GET        /dashboard/factors/freqs.json        @controllers.data.Dashboard.freqs(factor_class: String ?= null)
GET        /factors/rates.json        @controllers.data.Dashboard.rates()


GET        /data/logs        @controllers.data.LogTable.query()
GET        /data/logs/meta        @controllers.data.LogTable.meta()

GET        /data/clusters        @controllers.data.ClusterTable.query()
GET        /data/clusters/meta        @controllers.data.ClusterTable.meta()

GET        /data/factors        @controllers.data.FactorTable.query()
GET        /data/factors/meta        @controllers.data.FactorTable.meta()

GET        /data/trades        @controllers.data.TradeTable.query()
GET        /data/trades.csv        @controllers.data.TradeTable.csv()
GET        /data/trades/meta        @controllers.data.TradeTable.meta()

GET        /data/comms        @controllers.data.CommTable.query()
GET        /data/comms.csv        @controllers.data.CommTable.csv()
GET        /data/comms/meta        @controllers.data.CommTable.meta()

GET        /data/graph/factors/:tick        @controllers.data.Graph.factors(tick: Integer)
GET        /data/graph/factors/mcl/:tick        @controllers.data.Graph.factorsMcl(tick: Integer)
GET        /data/graph/clusters/:tick        @controllers.data.Graph.clusters(tick: Integer)
GET        /data/graph/:tick        @controllers.data.Graph.graph(tick: Integer)
#GET        /data/graph/:tick/:clusters/:factors        @controllers.data.Graph.graph(tick: Integer, clusters: String, factors: String)






# Map static resources from the /public folder to the /assets URL path
GET        /assets/*file        controllers.Assets.at(path="/public", file)
